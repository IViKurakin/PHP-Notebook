<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Простое управление таблицей</title>
    <!-- 
        Стили CSS для оформления страницы
        Определяют внешний вид элементов интерфейса
    -->
    <style>
        /* Основные стили для тела страницы */
        body {
            font-family: Arial, sans-serif; /* Шрифт для всей страницы */
            background-color: #f4f4f4;      /* Светло-серый фон */
            margin: 20px;                   /* Отступы от краев окна */
        }
        
        /* Стили для заголовка первого уровня */
        h1 {
            color: #333; /* Темно-серый цвет текста */
        }
        
        /* Стили для таблицы */
        table {
            width: 100%;           /* Таблица занимает всю доступную ширину */
            border-collapse: collapse; /* Границы ячеек сливаются в одну линию */
        }
        
        /* Стили для ячеек таблицы (заголовков и данных) */
        th, td {
            padding: 8px;           /* Внутренние отступы в ячейках */
            text-align: left;       /* Выравнивание текста по левому краю */
            border-bottom: 1px solid #ddd; /* Нижняя граница ячеек */
        }
        
        /* Стили для кнопок и кнопок отправки форм */
        input[type=submit], button {
            cursor: pointer;        /* Курсор в виде руки при наведении */
            padding: 10px 20px;     /* Внутренние отступы */
            background-color: #007BFF; /* Синий цвет фона */
            color: white;           /* Белый цвет текста */
            border: none;           /* Без границы */
            border-radius: 5px;     /* Закругленные углы */
        }
        
        /* Контейнер для форм с ограничением максимальной ширины */
        .form-container {
            max-width: 500px;       /* Максимальная ширина контейнера */
            margin: auto;           /* Центрирование по горизонтали */
            padding: 20px;          /* Внутренние отступы */
            background-color: #fff; /* Белый фон */
            box-shadow: 0 0 10px rgba(0,0,0,.1); /* Тень вокруг контейнера */
        }
        
        /* Стили для сообщений об ошибках */
        .error {
            color: red;     /* Красный цвет текста */
            margin: 10px 0; /* Отступы сверху и снизу */
        }
    </style>
</head>
<body>
<h1>Управление информацией в таблице</h1>
<?php
// =============================================================================
// КОНФИГУРАЦИЯ ПОДКЛЮЧЕНИЯ К БАЗЕ ДАННЫХ
// =============================================================================

// Данные для подключения к MySQL серверу
$host = 'localhost';    // Хост базы данных (обычно localhost)
$dbname = 'myAuthorize'; // Название базы данных
$user = 'root';         // Имя пользователя MySQL
$pass = '';             // Пароль пользователя MySQL (пустой по умолчанию в XAMPP)

// Инициализация переменных
$conn = null;   // Переменная для хранения соединения с БД
$users = [];    // Массив для хранения данных о пользователях
$error = '';    // Переменная для хранения сообщений об ошибках

// =============================================================================
// ПОДКЛЮЧЕНИЕ К БАЗЕ ДАННЫХ И ОСНОВНАЯ ЛОГИКА
// =============================================================================

// Блок try-catch для обработки возможных ошибок
try {
    // Установка соединения с базой данных MySQL
    // mysqli_connect возвращает объект соединения или false при ошибке
    $conn = mysqli_connect($host, $user, $pass, $dbname);
    
    // Проверка успешности подключения
    if (!$conn) {
        // Если подключение не удалось, генерируем исключение с текстом ошибки
        throw new Exception('Ошибка соединения с базой данных: ' . mysqli_connect_error());
    }
    
    // Установка кодировки соединения UTF-8 для корректного отображения русских символов
    mysqli_set_charset($conn, 'utf8');
    
    // =========================================================================
    // ОБРАБОТКА POST-ЗАПРОСОВ (ДАННЫХ ОТ ФОРМ)
    // =========================================================================
    
    // Проверяем, что форма была отправлена методом POST
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        
        // =====================================================================
        // ОБРАБОТКА УДАЛЕНИЯ ЗАПИСЕЙ
        // =====================================================================
        if(isset($_POST['delete']) && isset($_POST['ids'])) {
            // $_POST['ids'] содержит массив ID записей, отмеченных для удаления
            foreach ($_POST['ids'] as $id) {
                // Экранирование специальных символов для безопасности от SQL-инъекций
                $id = mysqli_real_escape_string($conn, $id);
                
                // Формирование SQL-запроса на удаление
                $sql = "DELETE FROM users WHERE id='$id'";
                
                // Выполнение запроса и проверка на ошибки
                if (!mysqli_query($conn, $sql)) {
                    $error = 'Ошибка при удалении: ' . mysqli_error($conn);
                }
            }
        }
        
        // =====================================================================
        // ОБРАБОТКА ДОБАВЛЕНИЯ НОВОГО ПОЛЬЗОВАТЕЛЯ
        // =====================================================================
        else if(isset($_POST['add'])) {
            // Получение данных из формы с проверкой на существование (оператор ?? - null coalescing)
            $name = mysqli_real_escape_string($conn, $_POST['new_name'] ?? '');
            $email = mysqli_real_escape_string($conn, $_POST['new_email'] ?? '');
            
            // Проверка, что оба поля заполнены
            if (!empty($name) && !empty($email)) {
                // Формирование SQL-запроса на вставку новой записи
                $sql = "INSERT INTO users(name, email) VALUES('$name', '$email')";
                
                // Выполнение запроса и обработка возможных ошибок
                if (!mysqli_query($conn, $sql)) {
                    $error = 'Ошибка при добавлении: ' . mysqli_error($conn);
                }
            } else {
                // Сообщение об ошибке, если поля пустые
                $error = 'Имя и email не могут быть пустыми';
            }
        }
        
        // =====================================================================
        // ОБРАБОТКА ОБНОВЛЕНИЯ СУЩЕСТВУЮЩИХ ЗАПИСЕЙ
        // =====================================================================
        else if(isset($_POST['update']) && isset($_POST['edit_id'])) {
            // $_POST['edit_id'] - массив ID записей для обновления
            // $index - индекс текущего элемента в массиве
            foreach ($_POST['edit_id'] as $index => $id) {
                // Экранирование данных для безопасности
                $id = mysqli_real_escape_string($conn, $id);
                $name = mysqli_real_escape_string($conn, $_POST['edit_name'][$index] ?? '');
                $email = mysqli_real_escape_string($conn, $_POST['edit_email'][$index] ?? '');
                
                // Проверка, что поля не пустые
                if (!empty($name) && !empty($email)) {
                    // Формирование SQL-запроса на обновление
                    $sql = "UPDATE users SET name='$name', email='$email' WHERE id='$id'";
                    
                    // Выполнение запроса
                    if (!mysqli_query($conn, $sql)) {
                        $error = 'Ошибка при обновлении: ' . mysqli_error($conn);
                    }
                }
            }
        }
    }
    
    // =========================================================================
    // ПОЛУЧЕНИЕ ДАННЫХ ИЗ БАЗЫ ДЛЯ ОТОБРАЖЕНИЯ В ТАБЛИЦЕ
    // =========================================================================
    
    // SQL-запрос для получения всех пользователей, отсортированных по ID
    $result = mysqli_query($conn, 'SELECT * FROM users ORDER BY id ASC');
    
    // Проверка успешности выполнения запроса
    if ($result) {
        // Цикл по всем строкам результата запроса
        // mysqli_fetch_assoc возвращает ассоциативный массив для каждой строки
        while ($row = mysqli_fetch_assoc($result)) {
            // Добавление данных пользователя в массив
            $users[] = $row;
        }
        
        // Освобождение памяти, занятой результатами запроса
        mysqli_free_result($result);
    } else {
        // Обработка ошибки выполнения запроса
        $error = 'Ошибка при получении данных: ' . mysqli_error($conn);
    }
    
} catch (Exception $e) {
    // Обработка исключений, которые могли возникнуть в блоке try
    $error = $e->getMessage();
}

// =============================================================================
// ЗАКРЫТИЕ СОЕДИНЕНИЯ С БАЗОЙ ДАННЫХ
// =============================================================================

// Проверяем, было ли установлено соединение, перед закрытием
if ($conn) {
    mysqli_close($conn); // Закрытие соединения для освобождения ресурсов
}
?>

<!-- =========================================================================== -->
<!-- ВЫВОД СООБЩЕНИЙ ОБ ОШИБКАХ -->
<!-- =========================================================================== -->

<?php if (!empty($error)): ?>
    <!-- Если есть сообщение об ошибке, выводим его в красном блоке -->
    <div class="error"><?php echo htmlspecialchars($error); ?></div>
<?php endif; ?>

<!-- =========================================================================== -->
<!-- ОСНОВНОЙ ИНТЕРФЕЙС ПРИЛОЖЕНИЯ -->
<!-- =========================================================================== -->

<div class="form-container">
    <!-- Форма для управления существующими записями (обновление/удаление) -->
    <form method="post">
        <table>
            <tr>
                <th>ID</th>         <!-- Заголовок столбца идентификаторов -->
                <th>Имя</th>        <!-- Заголовок столбца имен -->
                <th>Email</th>      <!-- Заголовок столбца email -->
                <th>Удалить?</th>   <!-- Заголовок столбца с чекбоксами -->
            </tr>
            <?php foreach ($users as $row): ?>
            <!-- Цикл по всем пользователям для создания строк таблицы -->
            <tr>
                <!-- Вывод ID пользователя -->
                <td><?php echo htmlspecialchars($row['id']); ?>
                    <!-- Скрытое поле для передачи ID при обновлении -->
                    <input type="hidden" name="edit_id[]" value="<?php echo htmlspecialchars($row['id']); ?>">
                </td>
                <!-- Поле ввода для редактирования имени -->
                <td><input type="text" name="edit_name[]" value="<?php echo htmlspecialchars($row['name']); ?>"></td>
                <!-- Поле ввода для редактирования email -->
                <td><input type="text" name="edit_email[]" value="<?php echo htmlspecialchars($row['email']); ?>"></td>
                <!-- Чекбокс для отметки записи к удалению -->
                <td><input type="checkbox" name="ids[]" value="<?php echo htmlspecialchars($row['id']); ?>"></td>
            </tr>
            <?php endforeach; ?>
        </table>
        <br />
        <!-- Кнопка для обновления отредактированных записей -->
        <button type="submit" name="update">Обновить выбранные строки</button>
        <!-- Кнопка для удаления отмеченных записей -->
        <button type="submit" name="delete">Удалить отмеченные строки</button>
    </form>
    
    <hr/> <!-- Горизонтальная разделительная линия -->
    
    <!-- Форма для добавления нового пользователя -->
    <h2>Добавление нового пользователя:</h2>
    <form method="post">
        Имя:<br/><input type="text" name="new_name"><br/>
        Email:<br/><input type="text" name="new_email"><br/>
        <button type="submit" name="add">Добавить</button>
    </form>
</div>
</body>
</html>